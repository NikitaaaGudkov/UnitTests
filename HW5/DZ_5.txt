*Задание 1. *Представьте, что вы работаете над разработкой простого приложения для записной книжки, которое позволяет пользователям добавлять, редактировать и удалять контакты.
Ваша задача - придумать как можно больше различных тестов (юнит-тесты, интеграционные тесты, сквозные тесты) для этого приложения. Напишите название каждого теста, его тип и краткое описание того, что этот тест проверяет.


1. CheckAddDataFrontend() - юнит-тест, проверяющий Frontend: какую информацию получает пользователь в ответ на добавление контакта. Если контакт валидный - должно показаться сообщение, что он успешно добавлен. Если контакт некорректен или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве бэкенд-логики используем заглушку.

2. CheckUpdateDataFrontend() - юнит-тест, проверяющий Frontend: какую информацию получает пользователь в ответ на изменение контакта. Если контакт существует, и обновление корректно - должно показаться сообщение, что он успешно изменён. Если контакт не найден, обновлённые данные не корректны или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве бэкенд-логики используем заглушку.

3. CheckDeleteDataFrontend() - юнит-тест, проверяющий Frontend: какую информацию получает пользователь в ответ на удаление контакта. Если контакт существует - должно показаться сообщение, что он успешно удалён. Если контакт не найден в базе - должно показаться соответствующее сообщение об ошибке. В качестве бэкенд-логики используем заглушку.

4. CheckAddDataBackend() - юнит-тест, проверяющий работу внутренней логики приложения при добавлении контакта. Если контакт валидный – должен отправиться запрос на добавление контакта в базу данных. Если контакт некорректен или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве нового контакта и базы данных используем заглушки.

5. CheckUpdateDataBackend() - юнит-тест проверяющий работу внутренней логики приложения при изменении контакта. Если контакт существует, и обновление корректно - должен отправиться запрос на изменение контакта в базу данных. Если контакт не найден, обновлённые данные не корректны или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве модифицируемого контакта и базы данных используем заглушки.

6. CheckDeleteDataBackend() - юнит-тест, проверяющий работу внутренней логики приложения при удалении контакта. Если контакт существует - должен отправиться запрос на удаление контакта в базу данных. Если контакт не найден в базе - должно показаться соответствующее сообщение об ошибке. В качестве удаляемого контакта и базы данных используем заглушки.
7. CheckAddDataFrontendAndBackend() – интеграционный тест, проверяющий взаимодействие Frontend-а и Backend-а: какую информацию получает пользователь в ответ на добавление контакта. Если контакт валидный - должно показаться сообщение, что он успешно добавлен. Если контакт некорректен или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве базы данных используем заглушку.

8. CheckUpdateDataFrontendAndBackend() - интеграционный тест, проверяющий взаимодействие Frontend-а и Backend-а: какую информацию получает пользователь в ответ на изменение контакта. Если контакт существует, и обновление корректно - должно показаться сообщение, что он успешно изменён. Если контакт не найден, обновлённые данные не корректны или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве базы данных используем заглушку.

9. CheckDeleteDataFrontendAndBackend() - интеграционный тест, проверяющий взаимодействие Frontend-а и Backend-а: какую информацию получает пользователь в ответ на удаление контакта. Если контакт существует - должно показаться сообщение, что он успешно удалён. Если контакт не найден в базе - должно показаться соответствующее сообщение об ошибке. В качестве базы данных используем заглушку.

10. CheckAddDataBackendAndDatabase() - интеграционный тест, проверяющий взаимодействие Backend-а и базы данных при добавлении контакта. Если контакт валидный – должен отправиться запрос на добавление контакта в базу данных. Если контакт некорректен или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве нового контакта используем заглушку.

11. CheckUpdateDataBackendAndDatabase () - интеграционный тест, проверяющий взаимодействие Backend-а и базы данных при изменении контакта. Если контакт существует, и обновление корректно - должен отправиться запрос на изменение контакта в базу данных. Если контакт не найден, обновлённые данные не корректны или уже есть в базе - должно показаться соответствующее сообщение об ошибке. В качестве модифицируемого контакта используем заглушку.

12. CheckDeleteDataBackendAndDatabase() - интеграционный тест, проверяющий взаимодействие Backend-а и базы данных при удалении контакта. Если контакт существует - должен отправиться запрос на удаление контакта в базу данных. Если контакт не найден в базе - должно показаться соответствующее сообщение об ошибке. В качестве удаляемого контакта используем заглушку.

13. CheckAddDataAll() – сквозной тест, проверяющий все компоненты программы (Frontend, Backend и базу данных): какую информацию получает пользователь в ответ на добавление контакта. Если контакт валидный - должно показаться сообщение, что он успешно добавлен. Если контакт некорректен или уже есть в базе - должно показаться соответствующее сообщение об ошибке.

14. CheckUpdateDataAll() – сквозной тест, проверяющий все компоненты программы (Frontend, Backend и базу данных): какую информацию получает пользователь в ответ на изменение контакта. Если контакт существует, и обновление корректно - должно показаться сообщение, что он успешно изменён. Если контакт не найден, обновлённые данные не корректны или уже есть в базе - должно показаться соответствующее сообщение об ошибке.

15. CheckDeleteDataAll() – сквозной тест, проверяющий все компоненты программы (Frontend, Backend и базу данных): какую информацию получает пользователь в ответ на удаление контакта. Если контакт существует - должно показаться сообщение, что он успешно удалён. Если контакт не найден в базе - должно показаться соответствующее сообщение об ошибке.




*Задание 2. *Ниже список тестовых сценариев. Ваша задача - определить тип каждого теста (юнит-тест, интеграционный тест, сквозной тест) и объяснить, почему вы так решили.

Проверка того, что функция addContact корректно добавляет новый контакт в список контактов"".
- Это юнит-тест, так как тестируется один модуль (функция addContact)

""Проверка того, что при добавлении контакта через пользовательский интерфейс, контакт корректно отображается в списке контактов"".
-Это интеграционный тест, так как тестируется несколько компонентов системы – пользовательский интерфейс и внутренняя логика приложения. Если в качестве хранилища данных используется рабочая база данных вместо заглушки – то тогда этот тест уже можно отнести к сквозному.

""Проверка полного цикла работы с контактом: создание контакта, его редактирование и последующее удаление"".
-Это сквозной тест, так как проверяется взаимодействие всех компонентов программы от начала до конца.
